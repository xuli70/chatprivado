/**
 * AI Analysis Manager
 * Sistema de an√°lisis inteligente de mensajes de chat usando OpenAI
 * M√≥dulo completamente independiente y aut√≥nomo
 */

// Import necesario para obtener mensajes de la base de datos
import { getAllRoomMessagesFromDB } from './message-manager.js';

export class AiAnalysisManager {
    constructor() {
        this.apiKey = window.env?.OPENAI_API_KEY || '';
        this.model = window.env?.AI_MODEL || 'gpt-4o-mini';
        this.cache = new Map(); // Cache de an√°lisis para evitar re-an√°lisis costosos
        this.isAnalyzing = false;
        
        // L√≠mites de rate limiting
        this.maxTokensPerRequest = 4000;
        this.lastRequestTime = 0;
        this.minRequestInterval = 3000; // 3 segundos entre requests
        
        console.log('ü§ñ AI Analysis Manager inicializado');
    }

    /**
     * Inicializar el m√≥dulo IA
     * M√©todo p√∫blico que configura event listeners y UI
     */
    init() {
        this.setupEventListeners();
        this.checkApiKeyAvailability();
    }

    /**
     * Verificar disponibilidad de API Key
     */
    checkApiKeyAvailability() {
        if (!this.apiKey || this.apiKey.trim() === '') {
            console.warn('‚ö†Ô∏è OpenAI API Key no configurada - Funciones IA deshabilitadas');
            this.disableAiFeatures();
            return false;
        }
        
        console.log('‚úÖ OpenAI API Key configurada correctamente');
        return true;
    }

    /**
     * Configurar event listeners para botones IA
     */
    setupEventListeners() {
        // Buscar bot√≥n IA en admin panel (se crear√° en index.html)
        const aiButton = document.getElementById('aiAnalysisBtn');
        if (aiButton) {
            aiButton.addEventListener('click', () => this.openAnalysisModal());
        }

        // Event listeners para opciones de an√°lisis
        this.setupAnalysisOptions();
    }

    /**
     * Configurar opciones de an√°lisis en modal
     */
    setupAnalysisOptions() {
        // Sentiment Analysis
        const sentimentBtn = document.getElementById('analysisOptionSentiment');
        if (sentimentBtn) {
            sentimentBtn.addEventListener('click', () => this.runAnalysis('sentiment'));
        }

        // Topic Analysis  
        const topicBtn = document.getElementById('analysisOptionTopic');
        if (topicBtn) {
            topicBtn.addEventListener('click', () => this.runAnalysis('topic'));
        }

        // Summary Analysis
        const summaryBtn = document.getElementById('analysisOptionSummary');
        if (summaryBtn) {
            summaryBtn.addEventListener('click', () => this.runAnalysis('summary'));
        }
    }

    /**
     * Abrir modal de an√°lisis IA
     */
    openAnalysisModal() {
        console.log('ü§ñ Intentando abrir modal de an√°lisis IA...');
        
        const modal = document.getElementById('aiAnalysisModal');
        if (!modal) {
            console.error('‚ùå Modal aiAnalysisModal no encontrado en DOM');
            this.showToast('Error: Modal IA no encontrado', 'error');
            return;
        }

        // Siempre mostrar el modal, independientemente de la API Key
        modal.style.display = 'flex';
        modal.classList.remove('hidden');
        
        // Reset resultados previos
        this.clearPreviousResults();
        
        // Verificar API Key despu√©s de mostrar el modal
        if (!this.checkApiKeyAvailability()) {
            const resultContainer = document.getElementById('aiAnalysisResult');
            if (resultContainer) {
                resultContainer.innerHTML = `
                    <div class="ai-error">
                        <h4>‚ö†Ô∏è Configuraci√≥n Requerida</h4>
                        <p>OpenAI API Key no configurada.</p>
                        <p>Configure OPENAI_API_KEY en las variables de entorno para usar el an√°lisis IA.</p>
                        <p><small>El modal se muestra para testing, pero las funciones IA est√°n deshabilitadas.</small></p>
                    </div>
                `;
            }
        }
        
        console.log('‚úÖ Modal de an√°lisis IA abierto');
    }

    /**
     * Cerrar modal de an√°lisis IA
     */
    closeAnalysisModal() {
        const modal = document.getElementById('aiAnalysisModal');
        if (modal) {
            modal.style.display = 'none';
            modal.classList.add('hidden');
            console.log('ü§ñ Modal de an√°lisis IA cerrado');
        }
    }

    /**
     * Ejecutar an√°lisis seg√∫n el tipo seleccionado
     */
    async runAnalysis(analysisType) {
        if (this.isAnalyzing) {
            this.showError('An√°lisis en progreso, por favor espere...');
            return;
        }

        // Rate limiting check
        const now = Date.now();
        if (now - this.lastRequestTime < this.minRequestInterval) {
            const waitTime = Math.ceil((this.minRequestInterval - (now - this.lastRequestTime)) / 1000);
            this.showError(`Por favor espere ${waitTime} segundos antes del pr√≥ximo an√°lisis.`);
            return;
        }

        try {
            this.isAnalyzing = true;
            this.showLoadingState(analysisType);

            // Obtener mensajes del chat actual desde la base de datos
            const messages = await this.getMessagesFromCurrentRoom();
            
            if (!messages || messages.length === 0) {
                throw new Error('No hay mensajes para analizar en la sala actual.');
            }

            // Verificar cache
            const cacheKey = this.generateCacheKey(messages, analysisType);
            if (this.cache.has(cacheKey)) {
                console.log('üìã Usando resultado del cache');
                const cachedResult = this.cache.get(cacheKey);
                this.showAnalysisResult(analysisType, cachedResult);
                return;
            }

            // Ejecutar an√°lisis con OpenAI
            const result = await this.performOpenAIAnalysis(messages, analysisType);
            
            // Guardar en cache
            this.cache.set(cacheKey, result);
            
            // Mostrar resultado
            this.showAnalysisResult(analysisType, result);
            
            this.lastRequestTime = Date.now();

        } catch (error) {
            console.error('‚ùå Error en an√°lisis IA:', error);
            this.showError(`Error en el an√°lisis: ${error.message}`);
        } finally {
            this.isAnalyzing = false;
            this.hideLoadingState();
        }
    }

    /**
     * Obtener TODOS los mensajes de la sala actual desde la base de datos
     * Versi√≥n mejorada que accede directamente a Supabase
     */
    async getMessagesFromCurrentRoom() {
        try {
            // Obtener sala actual desde la aplicaci√≥n global
            const currentRoom = window.chatApp?.state?.currentRoom;
            const supabaseClient = window.chatApp?.supabaseClient;

            if (!currentRoom) {
                throw new Error('No hay sala activa');
            }

            if (!supabaseClient) {
                console.warn('Supabase no disponible, intentando fallback DOM');
                return this.getMessagesFromDOM();
            }

            console.log(`üîç Obteniendo mensajes de sala ${currentRoom.id} desde base de datos...`);

            // Usar la nueva funci√≥n para obtener TODOS los mensajes
            const messages = await getAllRoomMessagesFromDB(currentRoom.id, supabaseClient);

            if (messages.length === 0) {
                throw new Error(`No se encontraron mensajes en la sala ${currentRoom.id}`);
            }

            // Procesar mensajes para el an√°lisis IA
            const processedMessages = messages.map(msg => ({
                id: msg.id,
                text: msg.text,
                author: this.formatAuthorForAnalysis(msg.author, msg.isAnonymous, msg.userIdentifier),
                timestamp: this.formatTimestamp(msg.timestamp),
                votes: msg.votes,
                isAnonymous: msg.isAnonymous,
                userIdentifier: msg.userIdentifier
            }));

            // Limitar a √∫ltimos 200 mensajes (nuevo l√≠mite del sistema)
            const limitedMessages = processedMessages.slice(-200);
            
            console.log(`üìä Preparados ${limitedMessages.length} mensajes para an√°lisis IA`);
            return limitedMessages;

        } catch (error) {
            console.error('Error obteniendo mensajes de BD:', error);
            
            // Fallback al DOM si hay problemas con la BD
            console.log('üîÑ Usando fallback: mensajes del DOM');
            return this.getMessagesFromDOM();
        }
    }

    /**
     * Fallback: Obtener mensajes del DOM (m√©todo anterior)
     */
    getMessagesFromDOM() {
        const messageElements = document.querySelectorAll('.message');
        const messages = [];

        messageElements.forEach(msgElement => {
            const textElement = msgElement.querySelector('.message-text');
            const authorElement = msgElement.querySelector('.message-author');
            const timeElement = msgElement.querySelector('.message-time');

            if (textElement && textElement.textContent.trim()) {
                messages.push({
                    text: textElement.textContent.trim(),
                    author: authorElement?.textContent?.trim() || 'An√≥nimo',
                    timestamp: timeElement?.textContent?.trim() || 'Desconocido',
                    votes: { likes: 0, dislikes: 0 }, // No disponible en DOM
                    source: 'DOM'
                });
            }
        });

        return messages.slice(-50); // L√≠mite menor para fallback
    }

    /**
     * Formatear autor para an√°lisis IA
     */
    formatAuthorForAnalysis(author, isAnonymous, userIdentifier) {
        if (!isAnonymous) {
            return author; // Creator name
        }
        
        if (userIdentifier) {
            return `An√≥nimo #${userIdentifier}`;
        }
        
        return 'An√≥nimo';
    }

    /**
     * Formatear timestamp para an√°lisis
     */
    formatTimestamp(timestamp) {
        try {
            const date = new Date(timestamp);
            return date.toLocaleString('es-ES', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            return timestamp || 'Fecha desconocida';
        }
    }

    /**
     * Realizar an√°lisis con OpenAI API
     */
    async performOpenAIAnalysis(messages, analysisType) {
        const prompt = this.buildPrompt(messages, analysisType);
        
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${this.apiKey}`
            },
            body: JSON.stringify({
                model: this.model,
                messages: [
                    {
                        role: 'system',
                        content: this.getSystemPrompt(analysisType)
                    },
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                max_tokens: this.maxTokensPerRequest,
                temperature: 0.3
            })
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        return data.choices[0]?.message?.content || 'Sin respuesta del modelo IA';
    }

    /**
     * Generar prompts del sistema para cada tipo de an√°lisis
     */
    getSystemPrompt(analysisType) {
        const systemPrompts = {
            sentiment: `Eres un experto en an√°lisis de sentimientos. Analiza el tono emocional de una conversaci√≥n de chat an√≥nimo. 
            
Proporciona:
1. Sentimiento general (Positivo/Neutral/Negativo) con porcentaje
2. Emociones principales detectadas
3. Evoluci√≥n del sentimiento a lo largo de la conversaci√≥n
4. Comentarios sobre la din√°mica emocional

Responde en espa√±ol de manera clara y profesional.`,

            topic: `Eres un experto en an√°lisis tem√°tico. Identifica y categoriza los temas principales discutidos en una conversaci√≥n de chat an√≥nimo.

Proporciona:
1. Temas principales (m√°ximo 5) con relevancia
2. Palabras clave m√°s frecuentes
3. Categorizaci√≥n tem√°tica (tecnolog√≠a, personal, trabajo, etc.)
4. Flujo de temas durante la conversaci√≥n

Responde en espa√±ol de manera clara y estructurada.`,

            summary: `Eres un experto en s√≠ntesis de conversaciones. Crea un resumen conciso y estructurado de una conversaci√≥n de chat an√≥nimo.

Proporciona:
1. Resumen ejecutivo (2-3 l√≠neas)
2. Puntos clave de la conversaci√≥n
3. Conclusiones o resoluciones alcanzadas
4. Participaci√≥n general (nivel de actividad)

Responde en espa√±ol de manera clara y profesional.`
        };

        return systemPrompts[analysisType] || systemPrompts.summary;
    }

    /**
     * Construir prompt espec√≠fico con los mensajes
     */
    buildPrompt(messages, analysisType) {
        const roomInfo = window.chatApp?.state?.currentRoom;
        const roomId = roomInfo?.id || 'Desconocida';
        
        let prompt = `Analiza la siguiente conversaci√≥n de chat an√≥nimo:\n\n`;
        prompt += `INFORMACI√ìN DE LA SALA:\n`;
        prompt += `- ID de sala: ${roomId}\n`;
        prompt += `- Total de mensajes: ${messages.length}\n`;
        prompt += `- Fuente de datos: ${messages[0]?.source || 'Base de datos Supabase'}\n`;
        prompt += `- Per√≠odo: ${messages[0]?.timestamp || 'N/A'} ‚Üí ${messages[messages.length - 1]?.timestamp || 'N/A'}\n\n`;
        
        prompt += `CONVERSACI√ìN:\n`;
        messages.forEach((msg, index) => {
            let messageInfo = `[${msg.timestamp}] ${msg.author}: ${msg.text}`;
            
            // Agregar informaci√≥n de votos si est√° disponible
            if (msg.votes && (msg.votes.likes > 0 || msg.votes.dislikes > 0)) {
                messageInfo += ` [üëç${msg.votes.likes} üëé${msg.votes.dislikes}]`;
            }
            
            prompt += messageInfo + '\n';
        });

        prompt += `\n\nCONTEXTO ADICIONAL:\n`;
        prompt += `- An√°lisis solicitado: ${analysisType}\n`;
        prompt += `- Usuarios √∫nicos identificados: ${this.countUniqueUsers(messages)}\n`;
        prompt += `- Mensajes con votos: ${this.countMessagesWithVotes(messages)}\n`;
        
        return prompt;
    }

    /**
     * Contar usuarios √∫nicos en los mensajes
     */
    countUniqueUsers(messages) {
        const uniqueAuthors = new Set(messages.map(msg => msg.author));
        return uniqueAuthors.size;
    }

    /**
     * Contar mensajes que tienen votos
     */
    countMessagesWithVotes(messages) {
        return messages.filter(msg => 
            msg.votes && (msg.votes.likes > 0 || msg.votes.dislikes > 0)
        ).length;
    }

    /**
     * Generar clave de cache
     */
    generateCacheKey(messages, analysisType) {
        const messageTexts = messages.map(m => m.text).join('|');
        const hash = this.simpleHash(messageTexts + analysisType);
        return `${analysisType}_${hash}`;
    }

    /**
     * Hash simple para cache
     */
    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash; // Convert to 32-bit integer
        }
        return hash.toString(36);
    }

    /**
     * Mostrar estado de carga
     */
    showLoadingState(analysisType) {
        const resultContainer = document.getElementById('aiAnalysisResult');
        if (resultContainer) {
            resultContainer.innerHTML = `
                <div class="ai-loading">
                    <div class="loading-spinner"></div>
                    <p>ü§ñ Analizando mensajes con IA...</p>
                    <p class="loading-detail">Tipo: ${this.getAnalysisTypeName(analysisType)}</p>
                </div>
            `;
        }
    }

    /**
     * Ocultar estado de carga
     */
    hideLoadingState() {
        // El loading se oculta cuando se muestra el resultado
    }

    /**
     * Mostrar resultado del an√°lisis
     */
    showAnalysisResult(analysisType, result) {
        const resultContainer = document.getElementById('aiAnalysisResult');
        const roomInfo = window.chatApp?.state?.currentRoom;
        const roomId = roomInfo?.id || 'N/A';
        
        if (resultContainer) {
            resultContainer.innerHTML = `
                <div class="ai-result">
                    <div class="ai-result-header">
                        <h4>üìä ${this.getAnalysisTypeName(analysisType)}</h4>
                        <div class="ai-room-info">
                            <small>üè† Sala: <strong>${roomId}</strong> | üìà Fuente: Chat Actual</small>
                        </div>
                    </div>
                    <div class="ai-result-content">
                        ${this.formatAnalysisResult(result)}
                    </div>
                    <div class="ai-result-footer">
                        <small>ü§ñ An√°lisis Inteligencia Artificial | ${new Date().toLocaleString()}</small>
                        <button class="btn btn--sm" onclick="aiManager.exportAnalysis('${analysisType}', '${result.replace(/'/g, "\\'")}')">
                            üìÑ Exportar
                        </button>
                    </div>
                </div>
            `;
        }
    }

    /**
     * Formatear resultado de an√°lisis para mostrar
     */
    formatAnalysisResult(result) {
        // Convertir texto plano en HTML formateado
        return result
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>')
            .replace(/(\d+\.)\s/g, '<strong>$1</strong> ')
            .replace(/^/, '<p>')
            .replace(/$/, '</p>');
    }

    /**
     * Obtener nombre legible del tipo de an√°lisis
     */
    getAnalysisTypeName(analysisType) {
        const names = {
            sentiment: 'An√°lisis de Sentimientos',
            topic: 'An√°lisis Tem√°tico', 
            summary: 'Resumen de Conversaci√≥n'
        };
        return names[analysisType] || 'An√°lisis';
    }

    /**
     * Mostrar error
     */
    showError(message) {
        const resultContainer = document.getElementById('aiAnalysisResult');
        if (resultContainer) {
            resultContainer.innerHTML = `
                <div class="ai-error">
                    <h4>‚ùå Error</h4>
                    <p>${message}</p>
                </div>
            `;
        }

        this.showToast(message, 'error');
    }

    /**
     * Mostrar toast notification
     */
    showToast(message, type = 'info') {
        // Intentar usar el sistema de toast existente
        if (window.chatApp && window.chatApp.showToast) {
            window.chatApp.showToast(message, type);
            return;
        }

        // Fallback: mostrar en consola
        console.log(`üçû Toast ${type}: ${message}`);
    }

    /**
     * Limpiar resultados previos
     */
    clearPreviousResults() {
        const resultContainer = document.getElementById('aiAnalysisResult');
        if (resultContainer) {
            resultContainer.innerHTML = `
                <div class="ai-placeholder">
                    <p>ü§ñ Selecciona un tipo de an√°lisis para comenzar</p>
                </div>
            `;
        }
    }

    /**
     * Exportar an√°lisis como archivo de texto
     */
    exportAnalysis(analysisType, result) {
        const filename = `analisis-${analysisType}-${new Date().toISOString().split('T')[0]}.txt`;
        const content = `AN√ÅLISIS DE CHAT AN√ìNIMO
=========================

Tipo: ${this.getAnalysisTypeName(analysisType)}
Fecha: ${new Date().toLocaleString()}
Modelo IA: ${this.model}

RESULTADO:
${result}

---
Generado por Chat An√≥nimo v3.0 con IA`;

        const blob = new Blob([content], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        console.log(`üìÑ An√°lisis exportado: ${filename}`);
    }

    /**
     * Deshabilitar funciones IA cuando no hay API key
     */
    disableAiFeatures() {
        const aiButton = document.getElementById('aiAnalysisBtn');
        if (aiButton) {
            aiButton.disabled = true;
            aiButton.title = 'OpenAI API Key no configurada';
            aiButton.style.opacity = '0.5';
        }
    }

    /**
     * Obtener estad√≠sticas de uso del cache
     */
    getCacheStats() {
        return {
            size: this.cache.size,
            keys: Array.from(this.cache.keys())
        };
    }

    /**
     * Limpiar cache (para testing o mantenimiento)
     */
    clearCache() {
        this.cache.clear();
        console.log('üóëÔ∏è Cache de an√°lisis IA limpiado');
    }
}

// Instancia global para uso desde HTML
window.aiManager = null;

console.log('ü§ñ AI Analysis Manager module loaded');